---
resource_types:
- name: pivnet
  type: docker-image
  source:
    repository: pivotalcf/pivnet-resource
    tag: latest-final

resources:
- name: platform-automation-pivnet
  type: pivnet
  source:
    api_token: "((pivnet-token))"
    product_slug: platform-automation
    product_version: 5\.(.*)
    sort_by: semver

- name: platform-automation-tasks
  type: s3
  source:
    bucket: ((s3.bucket_name))
    endpoint: ((s3.address))
    access_key_id: ((s3.access_key))
    secret_access_key: ((s3.secret_key))
    regexp: platform-automation-tasks-(.*).zip

- name: platform-automation-image
  type: s3
  source:
    bucket: ((s3.bucket_name))
    endpoint: ((s3.address))
    access_key_id: ((s3.access_key))
    secret_access_key: ((s3.secret_key))
    regexp: vsphere-platform-automation-image-(.*).tar.gz

- name: opsman-product
  type: s3
  source:
    endpoint: ((s3.address))
    bucket: ((s3.bucket_name))
    access_key_id: ((s3.access_key))
    secret_access_key: ((s3.secret_key))
    regexp: ops-manager-vsphere-(.*).ova

- name: healthwatch-product
  type: s3
  source:
    endpoint: ((s3.address))
    bucket: ((s3.bucket_name))
    access_key_id: ((s3.access_key))
    secret_access_key: ((s3.secret_key))
    regexp: p-healthwatch-(.*).pivotal

- name: healthwatch-stemcell
  type: s3
  source:
    endpoint: ((s3.address))
    bucket: ((s3.bucket_name))
    access_key_id: ((s3.access_key))
    secret_access_key: ((s3.secret_key))
    regexp: healthwatch-stemcell/bosh-stemcell-(.*)-vsphere-esxi-ubuntu-xenial-go_agent.tgz

- name: pas-product
  type: s3
  source:
    endpoint: ((s3.address))
    bucket: ((s3.bucket_name))
    access_key_id: ((s3.access_key))
    secret_access_key: ((s3.secret_key))
    regexp: srt-(.*).pivotal

- name: pas-stemcell
  type: s3
  source:
    endpoint: ((s3.address))
    bucket: ((s3.bucket_name))
    access_key_id: ((s3.access_key))
    secret_access_key: ((s3.secret_key))
    regexp: pas-stemcell/bosh-stemcell-(.*)-vsphere-esxi-ubuntu-xenial-go_agent.tgz

- name: ncp-product
  type: s3
  source:
    endpoint: ((s3.address))
    bucket: ((s3.bucket_name))
    access_key_id: ((s3.access_key))
    secret_access_key: ((s3.secret_key))
    regexp: VMware-NSX-T-(.*).pivotal

- name: configuration
  type: git
  source:
    private_key: ((config-repo-key.private_key))
    uri: ((config-repo-uri))

- name: daily
  type: time
  source:
    interval: 24h

jobs:
- name: fetch-opsman
  plan:
  - in_parallel:
    - get: daily
      trigger: true
    - get: platform-automation-tasks
      params: { unpack: true }
    - get: platform-automation-image
      params: { unpack: true }
    - get: configuration
  - task: interpolate-env-creds
    image: platform-automation-image
    file: platform-automation-tasks/tasks/credhub-interpolate.yml
    params:
      CREDHUB_CLIENT: ((credhub-client))
      CREDHUB_SECRET: ((credhub-secret))
      CREDHUB_SERVER: ((credhub-server))
      CREDHUB_CA_CERT: ((credhub-ca-cert.certificate))
      PREFIX: '/concourse/main'
      INTERPOLATION_PATHS: download-product
      SKIP_MISSING: false
    input_mapping:
      files: configuration
    output_mapping:
      interpolated-files: interpolated-configs
  - task: download-opsman-product
    image: platform-automation-image
    file: platform-automation-tasks/tasks/download-product.yml
    params:
      CONFIG_FILE: download-product/opsman.yml
    input_mapping:
      config: interpolated-configs
  - put: opsman-product
    params:
      file: downloaded-product/*


- name: fetch-healthwatch
  plan:
  - in_parallel:
    - get: daily
      trigger: true
    - get: platform-automation-tasks
      params: { unpack: true }
    - get: platform-automation-image
      params: { unpack: true }
    - get: configuration
  - task: interpolate-env-creds
    image: platform-automation-image
    file: platform-automation-tasks/tasks/credhub-interpolate.yml
    params:
      CREDHUB_CLIENT: ((credhub-client))
      CREDHUB_SECRET: ((credhub-secret))
      CREDHUB_SERVER: ((credhub-server))
      CREDHUB_CA_CERT: ((credhub-ca-cert.certificate))
      PREFIX: '/concourse/main'
      INTERPOLATION_PATHS: download-product
      SKIP_MISSING: false
    input_mapping:
      files: configuration
    output_mapping:
      interpolated-files: interpolated-configs
  - task: download-healthwatch-product
    image: platform-automation-image
    file: platform-automation-tasks/tasks/download-product.yml
    params:
      CONFIG_FILE: download-product/healthwatch.yml
    input_mapping:
      config: interpolated-configs
  - in_parallel:
    - put: healthwatch-product
      params:
        file: downloaded-product/*
    - put: healthwatch-stemcell
      params:
        file: downloaded-stemcell/*

- name: fetch-pas
  plan:
  - in_parallel:
    - get: daily
      trigger: true
    - get: platform-automation-tasks
      params: { unpack: true }
    - get: platform-automation-image
      params: { unpack: true }
    - get: configuration
  - task: interpolate-env-creds
    image: platform-automation-image
    file: platform-automation-tasks/tasks/credhub-interpolate.yml
    params:
      CREDHUB_CLIENT: ((credhub-client))
      CREDHUB_SECRET: ((credhub-secret))
      CREDHUB_SERVER: ((credhub-server))
      CREDHUB_CA_CERT: ((credhub-ca-cert.certificate))
      PREFIX: '/concourse/main'
      INTERPOLATION_PATHS: download-product
      SKIP_MISSING: false
    input_mapping:
      files: configuration
    output_mapping:
      interpolated-files: interpolated-configs
  - task: download-pas-product
    image: platform-automation-image
    file: platform-automation-tasks/tasks/download-product.yml
    params:
      CONFIG_FILE: download-product/pas.yml
    input_mapping:
      config: interpolated-configs
  - in_parallel:
    - put: pas-product
      params:
        file: downloaded-product/*
    - put: pas-stemcell
      params:
        file: downloaded-stemcell/*

- name: fetch-ncp
  plan:
  - in_parallel:
    - get: daily
      trigger: true
    - get: platform-automation-tasks
      params: { unpack: true }
    - get: platform-automation-image
      params: { unpack: true }
    - get: configuration
  - task: interpolate-env-creds
    image: platform-automation-image
    file: platform-automation-tasks/tasks/credhub-interpolate.yml
    params:
      CREDHUB_CLIENT: ((credhub-client))
      CREDHUB_SECRET: ((credhub-secret))
      CREDHUB_SERVER: ((credhub-server))
      CREDHUB_CA_CERT: ((credhub-ca-cert.certificate))
      PREFIX: '/concourse/main'
      INTERPOLATION_PATHS: download-product
      SKIP_MISSING: false
    input_mapping:
      files: configuration
    output_mapping:
      interpolated-files: interpolated-configs
  - task: download-ncp-product
    image: platform-automation-image
    file: platform-automation-tasks/tasks/download-product.yml
    params:
      CONFIG_FILE: download-product/ncp.yml
    input_mapping:
      config: interpolated-configs
  - put: ncp-product
    params:
      file: downloaded-product/*

- name: fetch-platform-automation
  plan:
  - get: platform-automation-pivnet
    trigger: true
  - in_parallel:
    - put: platform-automation-tasks
      params:
        file: platform-automation-pivnet/*tasks*.zip
    - put: platform-automation-image
      params:
        file: platform-automation-pivnet/*image*.tgz

